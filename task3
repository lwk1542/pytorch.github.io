# -*- coding: utf-8 -*-
"""
Created on Wed Apr 10 21:39:35 2019

@author: Dell
"""
import torch
import torch.nn as nn
import torchvision
import torch.optim as optim
# 定义超参数
batch_size = 32
learning_rate = 1e-3
num_epoches = 100
 
# 下载训练集 MNIST 手写数字训练集
train_dataset = torchvision.datasets.MNIST(root='./data/', train=True,
                               transform=torchvision.transforms.ToTensor(),\
                               download=True)
 
test_dataset = torchvision.datasets.MNIST(root='./data/', train=False,\
                              transform=torchvision.transforms.ToTensor())
 
train_loader = torch.utils.data.DataLoader(train_dataset, batch_size=batch_size, shuffle=True)
test_loader = torch.utils.data.DataLoader(test_dataset, batch_size=batch_size, shuffle=False)

class Logstic_Regression(nn.Module):
    def __init__(self, in_dim, n_class):
        super(Logstic_Regression, self).__init__()
        self.logstic = nn.Linear(in_dim, n_class)
 
    def forward(self, x):
        out = self.logstic(x)
        return out
 
model = Logstic_Regression(28*28, 10)  # 图片大小是28x28

model = model.cuda()

criterion = nn.CrossEntropyLoss()
optimizer = optim.SGD(model.parameters(), lr=learning_rate)

for epoch in range(num_epoches):
    print('epoch {}/'.format(epoch))
    print('*/'*10)
    running_loss = 0.0
    running_acc = 0.0
    for i, data in enumerate(train_loader, 1):
        img, label = data
        img = img.view(img.size(0), -1)  # 将图片展开成 28x28
        if use_gpu:
            img = Variable(img).cuda()
            label = Variable(label).cuda()
        else:
            img = Variable(img)
            label = Variable(label)
        # 向前传播
        out = model(img)
        loss = criterion(out, label)
        running_loss  = loss.data[0] * label.size(0)
        _, pred = torch.max(out, 1)
        num_correct = (pred == label).sum()
        running_acc  = num_correct.data[0]
        # 向后传播
        optimizer.zero_grad()
        loss.backward()
        optimizer.step()

model.eval()
